基于问题驱动的思路

如何解决master选举

回环备用机制

MapReduce的思想

重跑续跑支持

资源留buffer，确保sdk线程不死

作业抽象
数据库->数据库
数据库->调接口
数据库->


阅读代码指导
核心算法

问题1
解决方案1
解决方案引起的问题123
问题2...

动态调整pageSize chunkSize


数据库模式和非数据库模式


统一算法，各自执行

协调执行


多并一
分片->下个job统计总数
并行->下个job必须等都执行完


问题
1.现有的调度系统有什么？有哪些可以借鉴，哪些可以改善？


2.重新设计的这个需要解决跟些常见问题？如重跑，续跑，故障转移等

各种场景的本质..

不支持分布式事务，不支持跨库


架构分类：
1. 集中库，多执行机
   数据库模式或非数据库模式
2. 分库，多执行机
   数据库模式的话，如果统计一个作业流的执行时间需要跨库查询汇总，所以采用非数据库模式
3. 文件，多执行机

4. 网络接口输入，多执行机


动态参数配置，类似nacos，主动推送至应用，设置全局安全点

测试场景
3台执行机，一个库
                                          |-->生成账单文件->合并->上传FTP
任务：FTP下载->吃清算文件->拆分->入账->记息账单->|
                                          |-->生成交易文件->合并->上传FTP
