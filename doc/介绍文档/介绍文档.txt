    介绍tiger前先描述一下背景。
    本人参与过国内两大银行的某系统开发，其中参与最多的是批量任务这一块，虽然两个行的批量架构有所不同，但有一点想同的是依赖其它组件，比如依赖调度，依赖MQ等等。
    这样做的好处明显，符合架构设计中的职责单一的原则。但是引来的问题也有一些，比如：单点故障导致服务不可用。
    根本原因是什么？分析一下可以知道，虽然是分布式架构，但架构属于中心化架构，中心区组件的不可用会导致整个系统不可用。
    如下图：




    如何解决这一问题呢？伴随着区块链的出现，参考区块链去中心化的设计思想，设计一个去中心化的调度系统。
    ElasticJob等其它调度系统虽然号称是去中心化，但是仔细分析就知道，他的节点并不是像比特币矿机那样完全独立，还是依赖其它组件。
    那么我设计的这一个完全去中心化的调度系统。

    那么理想中的调度系统是什么样的呢？我的想法是调度任务依赖调度jar包，jar包中提供了完整的调度功能，包括通讯、共识、调度、监控、数据持久化等。
    如下图：



    任何方案都不可能是十全十美的，这样做可以预知产生哪些问题？
    可预料的有：
    1： jar包重量级，即依赖了一个很大的包
    2： 吃内存，消耗CPU，通讯设计不好导致网络拥堵,或者资源利用不足，浪费资源。
    3： jar包可扩展性差
    4： 共识协调算法可靠性

    解决这几个问题的话，要怎样设计呢？设计原则有哪些呢？
    对于1，原则是依赖的包越少越好，能自己造轮子就自己造(包括IOC框架，ORM框架等，甚至数据库也用JAVA实现)，保证代码轻量级，避免使用者各种依赖包冲突。
    对于2，算法需要设计好，尽量少通讯。增加智能参数调优功能，根据历次执行的数据，动态计算出本次需要的参数。
    对于3，开源，增强代码可读性可扩展性，不需要实现100%的需求做一个大而全的，而是遵循二八定律，只解决80%的问题，剩下的20%让使用者自己扩展。
    对于4，比特币挖矿的设计是要解决拜占庭问题，假设节点处于不可信的网络中，而我们的设计，是假设在可信的网络中，能通过约定来协调的，不走网络通讯去达成共识。

    批量任务是什么？
    不同于联机接口，通过启动一段程序来处理一些数据。
    输入源有：文件，网络，内存，数据库
    输出源有：文件，网络，内存，数据库
    整个处理过程就是输入输出的组合，比如：文件->数据库；文件->文件；文件->数据库->文件

    批量任务怎么去处理这些场景？
    来一个一个分析，首先场景最多的是 数据库->数据库
    对于这种场景，需要做数据分片，即每台执行节点处理一个分片的数据。
    如图：



    tiger是什么？

